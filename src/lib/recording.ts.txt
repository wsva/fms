import { callSTT } from "@/app/actions/ai";
import { ActionResult } from "./types";

export const startRecording = async (
    stateRecording: boolean,
    setStateRecording: React.Dispatch<React.SetStateAction<boolean>>,
    sentenceChunks: React.RefObject<BlobPart[]>,
    recorderRef: React.RefObject<MediaRecorder | null>,
    recognize: boolean,
    setStateProcessing: React.Dispatch<React.SetStateAction<boolean>>,
    handleLog: (log: string) => void,
    handleResult: (result: ActionResult<string>, audioUrl: string) => void
) => {
    if (stateRecording) {
        return
    }
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const recorder = new MediaRecorder(stream);
        recorderRef.current = recorder;

        sentenceChunks.current = [];
        recorder.ondataavailable = e => sentenceChunks.current.push(e.data);

        recorder.onstop = async () => {
            setStateRecording(false);
            handleLog("Recording stopped.");

            const audioBlob = new Blob(sentenceChunks.current, { type: 'audio/wav' });
            if (!audioBlob || audioBlob.size === 0) {
                handleLog("Empty audio blob â€” skipping transcription.");
                return;
            }
            const audioUrl = URL.createObjectURL(audioBlob);

            if (recognize) {
                handleLog("Sending to STT service, waiting for response...");
                const result = await callSTT(audioBlob, "auto");
                handleResult(result, audioUrl);
            } else {
                handleResult({status: "success", data: "recognize=false"}, audioUrl);
            }


            sentenceChunks.current = [];
            recorderRef.current = null;
            setStateProcessing(false);
        };

        recorder.start();
        setStateRecording(true);
        setStateProcessing(true);
        handleLog("Recording...");
    } catch (err) {
        console.error(err);
        handleLog("Failed to access microphone.");
    }
};

export const stopRecording = (
    stateRecording: boolean,
    recorderRef: React.RefObject<MediaRecorder | null>,
) => {
    if (stateRecording && recorderRef.current) {
        recorderRef.current.stop();
    }
};

export const toggleRecording = async (
    stateRecording: boolean,
    setStateRecording: React.Dispatch<React.SetStateAction<boolean>>,
    sentenceChunks: React.RefObject<BlobPart[]>,
    recorderRef: React.RefObject<MediaRecorder | null>,
    recognize: boolean,
    setStateProcessing: React.Dispatch<React.SetStateAction<boolean>>,
    handleLog: (log: string) => void,
    handleResult: (result: ActionResult<string>, audioUrl: string) => void
) => {
    await startRecording(
        stateRecording,
        setStateRecording,
        sentenceChunks,
        recorderRef,
        recognize,
        setStateProcessing,
        handleLog,
        handleResult,
    )

    stopRecording(
        stateRecording,
        recorderRef,
    )
};